#!/bin/bash
#
# ~/.sshrc
#

# Variables
############

DOTDIRNAME=".dotfiles"
DOTDIR="$HOME/$DOTDIRNAME"
DOTLIB="$DOTDIR/lib"
DOTBIN="$DOTDIR/bin "
VIMDIR="$DOTDIR/.vim.link"
ALIASDIR="$DOTDIR/.alias.d"
BASHDIR="$DOTDIR/.bash.d"
ZSHDIR="$DOTDIR/.zsh.d"
SHDIR="$DOTDIR/.sh.d"

DOTORIG="$DOTDIR/orig"
DOTTMP="/tmp/dotfiles"

DOTREPO="https://github.com/srccon/dotfiles.git"

# What to download
PKGS=(git vim ncdu ranger lynx htop tree zsh)

# Distro specific
APTPKGS=(ack-grep)
PACMANPKGS=(ack)
YUMPKGS=(ack)

# Which package manager are possible
PKGMANAGERS=(apt-get yum pacman)

# Missing apps array
needPKGS=()

# Functions
#################

function missingPKGS {
    if [[ ! -x "`which $1`" ]];then needPKGS+=("$1"); fi
}
function installPKGS {
    echo "Install: ${needPKGS[@]}?"
    read installapps
}
function submoduleInstall {
    git submodule init
    git submodule update --recursive --remote
}
function dotfilesSync {
    $DOTDIR/sync.sh
}
function installcontainer {
    for i in ${installingPKGS[@]}; do missingPKGS "$i"; done
    if [[ -n "${needPKGS[@]}" ]];then installPKGS; fi
    if [[ $installapps = "y" ]];then $PKM ${needPKGS[@]}; fi
}

# Logic
######################

# Switch to find Package manager and install apps 
for pkgm in "${PKGMANAGERS[@]}"; do
    if [ -x "`which $pkgm`" ]; then
        case $pkgm in
        apt-get)
            PKM="sudo apt-get update && sudo apt-get dist-upgrade && sudo apt-get -y install"
            installingPKGS=("${APTPKGS[@]}" "${PKGS[@]}")
            installcontainer
            ;;
        yum)
            PKM="sudo yum install"
            installingPKGS=("${YUMPKGS[@]}" "${PKGS[@]}")
            installcontainer
            ;;
        pacman)
            PKM="sudo pacman -Syu --confirm"
            installingPKGS=("${PACMANPKGS[@]}" "${PKGS[@]}")
            installcontainer
            ;;
        *)
            ;;
        esac
    fi
done

# Check for Dotfiles, install and update
if [[ -x "`which git`" ]];then
    if [ ! -d "$DOTDIR" ]; then
        echo "Install dotfiles: (y/n)"
        read installdotfiles
        if [ "$installdotfiles" = "y" ];then
            git clone "$DOTREPO" "$DOTDIR"
            (cd $DOTDIR && \
                submoduleInstall && \
                dotfilesSync \
            )
        fi
    else
        echo "Update dotfiles: (y/n)"
        read updatedotfiles
        if [ $updatedotfiles = "y" ];then
            (cd $DOTDIR && \
                git pull && \
                submoduleInstall && \
                dotfilesSync \
            )
        fi
    fi
else
    echo "Git missing, cannot clone/update dotfiles"
fi
